/**
 * @module teams-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Plan, PredictedCommand } from './Planner';
/**
 * @private
 */
export interface ParsedCommandResult {
    length: number;
    command?: PredictedCommand;
}
/**
 * Utility class to parse responses returned from LLM's.
 */
export declare class ResponseParser {
    /**
     * Attempts to find an Adaptive Card in a response.
     * @param {string} text Optional. Text to parse.
     * @returns {Record<string, any> | undefined} The found Adaptive Card or undefined if no card could be detected.
     */
    static parseAdaptiveCard(text?: string): Record<string, any> | undefined;
    /**
     * Attempts to find a JSON object with-in a response.
     * @template T Optional. Type of object to return.
     * @param {string} text Optional. Text to parse.
     * @returns {T} obj The parsed object or undefined if no object could be detected.
     */
    static parseJSON<T = Record<string, any>>(text?: string): T | undefined;
    /**
     * Parses a response and returns a plan.
     * @summary
     * If a plan object can be detected in the response it will be returned. Otherwise a plan with
     * a single SAY command containing the response will be returned.
     * @param {string} text Optional. Text to parse.
     * @returns {Plan} The parsed plan.
     */
    static parseResponse(text?: string): Plan;
    /**
     * Parses a DO command from a list of tokens.
     * @private
     * @param {string[]} tokens The list of tokens to parse.
     * @returns {ParsedCommandResult} The parsed command result.
     * @throws {Error} Throws an error if the token list passed in doesn't start with 'DO' token.
     */
    static parseDoCommand(tokens: string[]): ParsedCommandResult;
    /**
     * Parses a SAY command from a list of tokens.
     * @private
     * @param {string[]} tokens The list of tokens to parse.
     * @returns {ParsedCommandResult} The parsed command result.
     * @throws {Error} Throws an error if the token list passed in doesn't start with 'SAY' token.
     */
    static parseSayCommand(tokens: string[]): ParsedCommandResult;
    /**
     * Tokenizes a string of text into an array of tokens.
     * @private
     * @param {string} text The text to tokenize.
     * @returns {string[]} The array of tokens.
     */
    static tokenizeText(text?: string): string[];
}
//# sourceMappingURL=ResponseParser.d.ts.map