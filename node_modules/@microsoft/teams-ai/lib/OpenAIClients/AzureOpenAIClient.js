"use strict";
/**
 * @module teams-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureOpenAIClient = void 0;
const OpenAIClient_1 = require("./OpenAIClient");
/**
 * @private
 * @class
 * @implements {OpenAIClient}
 * `AzureOpenAIClient` Allows for Azure hosted OpenAI clients to be created and used. As of 4/4/2023, access keys must be specifically assigned to be used with this client.
 */
class AzureOpenAIClient extends OpenAIClient_1.OpenAIClient {
    constructor(options) {
        super(options);
        // Validate endpoint
        if (!options.endpoint) {
            throw new Error(`AzureOpenAIClient initialized without an 'endpoint'.`);
        }
    }
    createCompletion(request) {
        const clone = Object.assign({}, request);
        const deployment = this.removeModel(clone);
        const endpoint = this.options.endpoint;
        const apiVersion = this.options.apiVersion ?? '2022-12-01';
        const url = `${endpoint}/openai/deployments/${deployment}/completions?api-version=${apiVersion}`;
        return this.post(url, clone);
    }
    createChatCompletion(request) {
        const clone = Object.assign({}, request);
        const deployment = this.removeModel(clone);
        const endpoint = this.options.endpoint;
        const apiVersion = this.options.apiVersion ?? '2023-03-15-preview';
        const url = `${endpoint}/openai/deployments/${deployment}/chat/completions?api-version=${apiVersion}`;
        return this.post(url, clone);
    }
    createEmbedding(request) {
        const clone = Object.assign({}, request);
        const deployment = this.removeModel(clone);
        const endpoint = this.options.endpoint;
        const apiVersion = this.options.apiVersion ?? '2022-12-01';
        const url = `${endpoint}/openai/deployments/${deployment}/embeddings?api-version=${apiVersion}`;
        return this.post(url, clone);
    }
    createModeration(request) {
        const endpoint = this.options.endpoint;
        const url = `${endpoint}/contentsafety/text:analyze?api-version=${this.options.apiVersion}`;
        return this.post(url, request);
    }
    addRequestHeaders(headers, options) {
        headers[options.headerKey ?? 'api-key'] = options.apiKey;
    }
    removeModel(request) {
        const model = request.model;
        delete request.model;
        if (model) {
            return model;
        }
        else {
            return '';
        }
    }
}
exports.AzureOpenAIClient = AzureOpenAIClient;
//# sourceMappingURL=AzureOpenAIClient.js.map