/**
 * @module teams-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { TurnContext, Storage, BotAdapter, ConversationReference, Activity, ResourceResponse } from 'botbuilder';
import { TurnState, TurnStateManager } from './TurnState';
import { DefaultTurnState } from './DefaultTurnStateManager';
import { AdaptiveCards, AdaptiveCardsOptions } from './AdaptiveCards';
import { MessageExtensions } from './MessageExtensions';
import { AI, AIOptions } from './AI';
import { TaskModules, TaskModulesOptions } from './TaskModules';
/**
 * Query arguments for a search-based message extension.
 * @template TParams Type of the query parameters.
 */
export interface Query<TParams extends Record<string, any>> {
    /**
     * Number of items to return in the result set.
     */
    count: number;
    /**
     * Number of items to skip in the result set.
     */
    skip: number;
    /**
     * Query parameters.
     */
    parameters: TParams;
}
/**
 * Options for the Application class.
 * @template TState Type of the turn state.
 */
export interface ApplicationOptions<TState extends TurnState> {
    /**
     * Optional. Bot adapter being used.
     * @summary
     * If using the `longRunningMessages` option or calling the continueConversationAsync() method,
     * this property is required.
     */
    adapter?: BotAdapter;
    /**
     * Optional. Application ID of the bot.
     * @summary
     * If using the `longRunningMessages` option or calling the continueConversationAsync() method,
     * this property is required.
     */
    botAppId?: string;
    /**
     * Optional. Storage provider to use for the application.
     */
    storage?: Storage;
    /**
     * Optional. AI options to use. When provided, a new instance of the AI system will be created.
     */
    ai?: AIOptions<TState>;
    /**
     * Optional. Turn state manager to use. If omitted, an instance of DefaultTurnStateManager will
     * be created.
     */
    turnStateManager: TurnStateManager<TState>;
    /**
     * Optional. Options used to customize the processing of Adaptive Card requests.
     */
    adaptiveCards?: AdaptiveCardsOptions;
    /**
     * Optional. Options used to customize the processing of task module requests.
     */
    taskModules?: TaskModulesOptions;
    /**
     * Optional. If true, the bot will automatically remove mentions of the bot's name from incoming
     * messages. Defaults to true.
     */
    removeRecipientMention: boolean;
    /**
     * Optional. If true, the bot will automatically start a typing timer when messages are received.
     * This allows the bot to automatically indicate that it's received the message and is processing
     * the request. Defaults to true.
     */
    startTypingTimer: boolean;
    /**
     * Optional. If true, the bot supports long running messages that can take longer then the 10 - 15
     * second timeout imposed by most channels. Defaults to false.
     * @summary
     * This works by immediately converting the incoming request to a proactive conversation. Care should
     * be used for bots that operate in a shared hosting environment. The incoming request is immediately
     * completed and many shared hosting environments will mark the bot's process as idle and shut it down.
     */
    longRunningMessages: boolean;
}
/**
 * Conversation update events.
 */
export type ConversationUpdateEvents = 'channelCreated' | 'channelRenamed' | 'channelDeleted' | 'channelRestored' | 'membersAdded' | 'membersRemoved' | 'teamRenamed' | 'teamDeleted' | 'teamHardDeleted' | 'teamArchived' | 'teamUnarchived' | 'teamRestored' | 'topicName' | 'historyDisclosed';
/**
 * Function for handling an incoming request.
 * @template TState Type of the turn state.
 * @param context Context for the current turn of conversation with the user.
 * @param state Current turn state.
 * @returns A promise that resolves when the handler completes its processing.
 */
export type RouteHandler<TState extends TurnState> = (context: TurnContext, state: TState) => Promise<void>;
/**
 * Function for selecting whether a route handler should be triggered.
 * @param context Context for the current turn of conversation with the user.
 * @returns A promise that resolves with a boolean indicating whether the route handler should be triggered.
 */
export type RouteSelector = (context: TurnContext) => Promise<boolean>;
/**
 * Message reaction event types.
 */
export type MessageReactionEvents = 'reactionsAdded' | 'reactionsRemoved';
/**
 * Turn event types.
 * @summary
 * The `beforeTurn` event is triggered before the turn is processed. This allows for the turn state to be
 * modified before the turn is processed. Returning false from the event handler will prevent the turn from
 * being processed.
 *
 * The `afterTurn` event is triggered after the turn is processed. This allows for the turn state to be
 * modified or inspected after the turn is processed. Returning false from the event handler will prevent
 * the turn state from being saved.
 */
export type TurnEvents = 'beforeTurn' | 'afterTurn';
/**
 * Application class for routing and processing incoming requests.
 * @summary
 * The Application object replaces the traditional ActivityHandler that a bot would use. It supports
 * a simpler fluent style of authoring bots versus the inheritance based approach used by the
 * ActivityHandler class.
 *
 * Additionally, it has built-in support for calling into the SDK's AI system and can be used to create
 * bots that leverage Large Language Models (LLM) and other AI capabilities.
 * @template TState Optional. Type of the turn state. This allows for strongly typed access to the turn state.
 */
export declare class Application<TState extends TurnState = DefaultTurnState> {
    private readonly _options;
    private readonly _routes;
    private readonly _invokeRoutes;
    private readonly _adaptiveCards;
    private readonly _messageExtensions;
    private readonly _taskModules;
    private readonly _ai?;
    private readonly _beforeTurn;
    private readonly _afterTurn;
    private _typingTimer;
    /**
     * Creates a new Application instance.
     * @param {ApplicationOptions<TState>} options Optional. Options used to configure the application.
     */
    constructor(options?: Partial<ApplicationOptions<TState>>);
    /**
     * Fluent interface for accessing Adaptive Card specific features.
     * @returns {AdaptiveCards<TState>} The AdaptiveCards instance.
     */
    get adaptiveCards(): AdaptiveCards<TState>;
    /**
     * Fluent interface for accessing AI specific features.
     * @summary
     * This property is only available if the Application was configured with `ai` options. An
     * exception will be thrown if you attempt to access it otherwise.
     * @returns {AI<TState>} The AI instance.
     */
    get ai(): AI<TState>;
    /**
     * Fluent interface for accessing Message Extensions' specific features.
     * @returns {MessageExtensions<TState>} The MessageExtensions instance.
     */
    get messageExtensions(): MessageExtensions<TState>;
    /**
     * The application's configured options.
     * @returns {ApplicationOptions<TState>} The application's configured options.
     */
    get options(): ApplicationOptions<TState>;
    /**
     * Fluent interface for accessing Task Module specific features.
     * @returns {TaskModules<TState>} The TaskModules instance.
     */
    get taskModules(): TaskModules<TState>;
    /**
     * Adds a new route to the application.
     * @summary
     * Developers won't typically need to call this method directly as it's used internally by all
     * of the fluent interfaces to register routes for their specific activity types.
     *
     * Routes will be matched in the order they're added to the application. The first selector to
     * return `true` when an activity is received will have its handler called.
     *
     * Invoke-based activities receive special treatment and are matched separately as they typically
     * have shorter execution timeouts.
     * @param {RouteSelector} selector Function thats used to select a route. The function should return true to trigger the route.
     * @param {RouteHandler<TState>} handler Function to call when the route is triggered.
     * @param {boolean} isInvokeRoute Optional. Boolean indicating if the RouteSelector is for an activity that uses "invoke" which require special handling. Defaults to `false`.
     * @returns {this} The application instance for chaining purposes.
     */
    addRoute(selector: RouteSelector, handler: RouteHandler<TState>, isInvokeRoute?: boolean): this;
    /**
     * Handles incoming activities of a given type.
     * @param {string | RegExp | RouteSelector | string[] | RegExp[] | RouteSelector[]} type Name of the activity type to match or a regular expression to match against the incoming activity type. An array of type names or expression can also be passed in.
     * @param {(context: TurnContext, state: TState) => Promise<void>} handler Function to call when the route is triggered.
     * @param {TurnContext} handler.context The context object for the turn.
     * @param {TState} handler.state The state object for the turn.
     * @returns {this} The application instance for chaining purposes.
     */
    activity(type: string | RegExp | RouteSelector | (string | RegExp | RouteSelector)[], handler: (context: TurnContext, state: TState) => Promise<void>): this;
    /**
     * Handles conversation update events.
     * @param {ConversationUpdateEvents | ConversationUpdateEvents[]} event Name of the conversation update event(s) to handle.
     * @param {(context: TurnContext, state: TState) => Promise<void>} handler Function to call when the route is triggered.
     * @param {TurnContext} handler.context The context object for the turn.
     * @param {TState} handler.state The state object for the turn.
     * @returns {this} The application instance for chaining purposes.
     */
    conversationUpdate(event: ConversationUpdateEvents | ConversationUpdateEvents[], handler: (context: TurnContext, state: TState) => Promise<void>): this;
    /**
     * Starts a new "proactive" session with a conversation the bot is already a member of.
     * @summary
     * Use of the method requires configuration of the Application with the `adapter` and `botAppId`
     * options. An exception will be thrown if either is missing.
     * @param context Context of the conversation to proactively message. This can be derived from either a TurnContext, ConversationReference, or Activity.
     * @param logic The bot's logic that should be run using the new proactive turn context.
     */
    continueConversationAsync(context: TurnContext, logic: (context: TurnContext) => Promise<void>): Promise<void>;
    continueConversationAsync(conversationReference: Partial<ConversationReference>, logic: (context: TurnContext) => Promise<void>): Promise<void>;
    continueConversationAsync(activity: Partial<Activity>, logic: (context: TurnContext) => Promise<void>): Promise<void>;
    /**
     * Handles incoming messages with a given keyword.
     * @summary
     * This method provides a simple way to have a bot respond anytime a user sends your bot a
     * message with a specific word or phrase.
     *
     * For example, you can easily clear the current conversation anytime a user sends "/reset":
     *
     * ```JavaScript
     * bot.message('/reset', async (context, state) => {
     *     await state.conversation.delete();
     *     await context.sendActivity(`I have reset your state.`);
     * });
     * ```
     * @param {string | RegExp | RouteSelector | string[] | RegExp[] | RouteSelector[]} keyword Substring of text or a regular expression to match against the text of an incoming message. An array of keywords or expression can also be passed in.
     * @param {(context: TurnContext, state: TState) => Promise<void>} handler Function to call when the route is triggered.
     * @returns {this} The application instance for chaining purposes.
     */
    message(keyword: string | RegExp | RouteSelector | (string | RegExp | RouteSelector)[], handler: (context: TurnContext, state: TState) => Promise<void>): this;
    /**
     * Handles message reaction events.
     * @param {MessageReactionEvents | MessageReactionEvents[]} event Name of the message reaction event(s) to handle.
     * @param {(context: TurnContext, state: TState) => Promise<void>} handler Function to call when the route is triggered.
     * @returns {this} The application instance for chaining purposes.
     */
    messageReactions(event: MessageReactionEvents | MessageReactionEvents[], handler: (context: TurnContext, state: TState) => Promise<void>): this;
    /**
     * Dispatches an incoming activity to a handler registered with the application.
     * @summary
     * This method should be called from your bot's "turn handler" (its primary message handler)
     *
     * ```JavaScript
     * server.post('/api/messages', async (req, res) => {
     *    await adapter.processActivity(req, res, async (context) => {
     *      await bot.run(context);
     *   });
     * });
     * ```
     * @param {TurnContext} turnContext Context class for the current turn of conversation with the user.
     * @returns {Promise<boolean>} True if the activity was successfully dispatched to a handler. False if no matching handlers could be found.
     */
    run(turnContext: TurnContext): Promise<boolean>;
    /**
     * Sends a proactive activity to an existing conversation the bot is a member of.
     * @summary
     * This method provides a simple way to send a proactive message to a conversation the bot is a member of.
     *
     * Use of the method requires you configure the Application with the `adapter` and `botAppId`
     * options. An exception will be thrown if either is missing.
     * @param context Context of the conversation to proactively message. This can be derived from either a TurnContext, ConversationReference, or Activity.
     * @param activityOrText Activity or message to send to the conversation.
     * @param speak Optional. Text to speak for channels that support voice.
     * @param inputHint Optional. Input hint for channels that support voice.
     * @returns A Resource response containing the ID of the activity that was sent.
     */
    sendProactiveActivity(context: TurnContext, activityOrText: string | Partial<Activity>, speak?: string, inputHint?: string): Promise<ResourceResponse | undefined>;
    sendProactiveActivity(conversationReference: Partial<ConversationReference>, activityOrText: string | Partial<Activity>, speak?: string, inputHint?: string): Promise<ResourceResponse | undefined>;
    sendProactiveActivity(activity: Partial<Activity>, activityOrText: string | Partial<Activity>, speak?: string, inputHint?: string): Promise<ResourceResponse | undefined>;
    /**
     * Manually start a timer to periodically send "typing" activities.
     * @summary
     * The timer waits 1000ms to send its initial "typing" activity and then send an additional
     * "typing" activity every 1000ms. The timer will automatically end once an outgoing activity
     * has been sent. If the timer is already running or the current activity, is not a "message"
     * the call is ignored.
     * @param {TurnContext} context The context for the current turn with the user.
     */
    startTypingTimer(context: TurnContext): void;
    /**
     * Manually stop the typing timer.
     * @summary
     * If the timer isn't running nothing happens.
     */
    stopTypingTimer(): void;
    /**
     * Registers a turn event handler.
     * @summary
     * Turn events let you do something before or after a turn is run. Returning false from
     * `beforeTurn` lets you prevent the turn from running and returning false from `afterTurn`
     * lets you prevent the bots state from being saved.
     *
     * Returning false from `beforeTurn` does result in the bots state being saved which lets you
     * track the reason why the turn was not processed. It also means you can use `beforeTurn` as
     * a way to call into the dialog system. For example, you could use the OAuthPrompt to sign the
     * user in before allowing the AI system to run.
     * @param {TurnEvents | TurnEvents[]} event - Name of the turn event to handle.
     * @param {(context: TurnContext, state: TState) => Promise<boolean>} handler - Function to call when the event is triggered.
     * @returns {this} The application instance for chaining purposes.
     */
    turn(event: TurnEvents | TurnEvents[], handler: (context: TurnContext, state: TState) => Promise<boolean>): this;
    /**
     * Calls the given event handlers with the given context and state.
     * @param {TurnContext} context - The context for the current turn with the user.
     * @param {TState} state - The current state of the conversation.
     * @param {ApplicationEventHandler<TState>[]} handlers - The event handlers to call.
     * @returns {Promise<boolean>} A Promise that resolves to a boolean indicating whether the event handlers completed successfully.
     * @private
     */
    private callEventHandlers;
    /**
     * Calls the given handler with the given context, either directly or by continuing the conversation
     * if the message is a long-running message.
     * @param {TurnContext} context - The context for the current turn with the user.
     * @param {(context: TurnContext) => Promise<boolean>} handler - The handler function to call.
     * @returns {Promise<boolean>} A Promise that resolves to a boolean indicating whether the handler completed successfully.
     * @private
     */
    private startLongRunningCall;
}
/**
 * A builder class for simplifying the creation of an Application instance.
 * @template TState Optional. Type of the turn state. This allows for strongly typed access to the turn state.
 */
export declare class ApplicationBuilder<TState extends TurnState = DefaultTurnState> {
    private _options;
    /**
     * Configures the application to use long running messages.
     * Default state for longRunningMessages is false
     * @param {BotAdapter} adapter The adapter to use for routing incoming requests.
     * @param {string} botAppId The Microsoft App ID for the bot.
     * @returns {this} The ApplicationBuilder instance.
     */
    withLongRunningMessages(adapter: BotAdapter, botAppId: string): this;
    /**
     * Configures the storage system to use for storing the bot's state.
     * @param {Storage} storage The storage system to use.
     * @returns {this} The ApplicationBuilder instance.
     */
    withStorage(storage: Storage): this;
    /**
     * Configures the AI system to use for processing incoming messages.
     * @param {AIOptions<TState>} aiOptions The options for the AI system.
     * @returns {this} The ApplicationBuilder instance.
     */
    withAIOptions(aiOptions: AIOptions<TState>): this;
    /**
     * Configures the turn state manager to use for managing the bot's turn state.
     * @param {TurnStateManager<TState>} turnStateManager The turn state manager to use.
     * @returns {this} The ApplicationBuilder instance.
     */
    withTurnStateManager(turnStateManager: TurnStateManager<TState>): this;
    /**
     * Configures the processing of Adaptive Card requests.
     * @param {AdaptiveCardsOptions} adaptiveCardOptions The options for the Adaptive Cards.
     * @returns {this} The ApplicationBuilder instance.
     */
    withAdaptiveCardOptions(adaptiveCardOptions: AdaptiveCardsOptions): this;
    /**
     * Configures the processing of Task Module requests.
     * @param {TaskModulesOptions} taskModuleOptions The options for the Task Modules.
     * @returns {this} The ApplicationBuilder instance.
     */
    withTaskModuleOptions(taskModuleOptions: TaskModulesOptions): this;
    /**
     * Configures the removing of mentions of the bot's name from incoming messages.
     * Default state for removeRecipientMention is true
     * @param {boolean} removeRecipientMention The boolean for removing reciepient mentions.
     * @returns {this} The ApplicationBuilder instance.
     */
    setRemoveRecipientMention(removeRecipientMention: boolean): this;
    /**
     * Configures the typing timer when messages are received.
     * Default state for startTypingTimer is true
     * @param {boolean} startTypingTimer The boolean for starting the typing timer.
     * @returns {this} The ApplicationBuilder instance.
     */
    setStartTypingTimer(startTypingTimer: boolean): this;
    /**
     * Builds and returns a new Application instance.
     * @returns {Application<TState>} The Application instance.
     */
    build(): Application<TState>;
}
//# sourceMappingURL=Application.d.ts.map