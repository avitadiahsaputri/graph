import { TurnContext } from 'botbuilder';
import { DefaultConversationState, DefaultTempState, DefaultTurnState, DefaultUserState } from './DefaultTurnStateManager';
import { PromptManager, PromptTemplate } from './Prompts';
/**
 * A prompt manager used for testing.
 */
export declare class TestPromptManager implements PromptManager<DefaultTurnState> {
    readonly functions: Map<string, (context: TurnContext, state: DefaultTurnState<DefaultConversationState, DefaultUserState, DefaultTempState>) => Promise<any>>;
    readonly templates: Map<string, PromptTemplate>;
    addFunction(name: string, handler: (context: TurnContext, state: DefaultTurnState<DefaultConversationState, DefaultUserState, DefaultTempState>) => Promise<any>, allowOverrides?: boolean | undefined): this;
    addPromptTemplate(name: string, template: PromptTemplate): this;
    invokeFunction(context: TurnContext, state: DefaultTurnState<DefaultConversationState, DefaultUserState, DefaultTempState>, name: string): Promise<any>;
    renderPrompt(context: TurnContext, state: DefaultTurnState<DefaultConversationState, DefaultUserState, DefaultTempState>, nameOrTemplate: string | PromptTemplate): Promise<PromptTemplate>;
}
//# sourceMappingURL=TestPromptManager.d.ts.map