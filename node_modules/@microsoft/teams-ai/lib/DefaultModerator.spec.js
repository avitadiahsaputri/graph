"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("assert");
const DefaultModerator_1 = require("./DefaultModerator");
const botbuilder_core_1 = require("botbuilder-core");
const TurnState_1 = require("./TurnState");
const ConversationHistory_1 = require("./ConversationHistory");
describe('DefaultModerator', () => {
    const adapter = new botbuilder_core_1.TestAdapter();
    const createTurnContextAndState = () => {
        const mockTurnContext = new botbuilder_core_1.TurnContext(adapter, { text: 'test', type: botbuilder_core_1.ActivityTypes.Message });
        const state = {
            conversation: new TurnState_1.TurnStateEntry({ [ConversationHistory_1.ConversationHistory.StatePropertyName]: [] }),
            user: new TurnState_1.TurnStateEntry(),
            dialog: new TurnState_1.TurnStateEntry(),
            temp: new TurnState_1.TurnStateEntry()
        };
        return [mockTurnContext, state];
    };
    describe('reviewPrompt()', () => {
        it('should return unddefined', async () => {
            const [mockTurnContext, state] = createTurnContextAndState();
            const moderator = new DefaultModerator_1.DefaultModerator();
            const plan = await moderator.reviewPrompt(mockTurnContext, state, {}, {});
            assert_1.strict.equal(plan, undefined);
        });
    });
    describe('reviewPrompt()', () => {
        it('should return the provided plan', async () => {
            const [mockTurnContext, state] = createTurnContextAndState();
            const expectedPlan = {
                type: 'plan',
                commands: [{}]
            };
            const moderator = new DefaultModerator_1.DefaultModerator();
            const plan = await moderator.reviewPlan(mockTurnContext, state, expectedPlan);
            assert_1.strict.deepEqual(plan, expectedPlan);
        });
    });
});
//# sourceMappingURL=DefaultModerator.spec.js.map